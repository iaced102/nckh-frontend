{"ast":null,"code":"import IndexedDB from '@/plugins/utilModules/indexedDB.js';\nvar loginedInfo = null;\nasync function getLoginInfoFromIndexedDB() {\n  return new Promise((resolve, reject) => {\n    let indexedDB = new IndexedDB('SYMPER-LOGIN-INFOR');\n    if (!loginedInfo) {\n      indexedDB.open('loginInfo', false, false, async () => {\n        try {\n          loginedInfo = await indexedDB.read('loginInfo');\n          if (typeof loginedInfo == 'string') {\n            loginedInfo = JSON.parse(loginedInfo);\n          }\n          resolve(loginedInfo);\n        } catch (error) {\n          console.error('[SYMPER] Can not read from indexedDB', error);\n          reject(error);\n        }\n      });\n    } else {\n      resolve(loginedInfo);\n    }\n  });\n}\n\n/**\r\n * Các hàm phục vụ cho việc xác thực, lưu trữ dữ liệu đăng nhập cho người dùng\r\n */\nexport const authUtil = {\n  saveLoginInfo(data) {\n    /**\r\n     * data có dạng: {\r\n     *      token: \"xxx\",\r\n     *      baId: \"yyy\",\r\n     *      endUserId: \"zzzz\"\r\n     * }\r\n     */\n    return new Promise((resolve, reject) => {\n      localStorage.setItem('symper-login-info', JSON.stringify(data));\n      let indexedDB = new IndexedDB('SYMPER-LOGIN-INFOR');\n      indexedDB.open('loginInfo', false, false, async () => {\n        try {\n          await indexedDB.save(data, 'loginInfo');\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  },\n  getToken() {\n    if (self.window) {\n      let loginInfo = localStorage.getItem('symper-login-info');\n      if (loginInfo) {\n        return JSON.parse(loginInfo).token;\n      } else {\n        return false;\n      }\n    } else {\n      return new Promise(async (resolve, reject) => {\n        let loginInfo = await getLoginInfoFromIndexedDB();\n        resolve(loginInfo.token);\n      });\n    }\n  },\n  isSupportter() {\n    return this.getSavedUserInfo().profile.type == 'ba';\n  },\n  checkLogin() {\n    if (this.getToken()) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  logout() {\n    localStorage.removeItem('symper-login-info');\n  },\n  getSavedUserInfo() {\n    let loginInfo = localStorage.getItem('symper-login-info');\n    if (loginInfo) {\n      return JSON.parse(loginInfo);\n    } else {\n      return {};\n    }\n  },\n  async setSavedUserInfo(data) {\n    let loginInfo = this.getSavedUserInfo();\n    loginInfo = Object.assign(loginInfo, data);\n    await this.saveLoginInfo(loginInfo);\n  },\n  getCurrentUserRole() {\n    let data = this.getSavedUserInfo();\n    let role = '';\n    if (data.profile && data.profile.userDelegate && data.profile.userDelegate.role) {\n      role = data.profile.userDelegate.role;\n    } else if (data.profile) {\n      role = data.profile.role;\n    }\n    return role;\n  },\n  checkLoginAndSetToIndexedDB() {\n    if (this.checkLogin()) {\n      let logiInfo = this.getSavedUserInfo();\n      let indexedDB = new IndexedDB('SYMPER-LOGIN-INFOR');\n      indexedDB.open('loginInfo', false, false, () => {\n        indexedDB.save(logiInfo, 'loginInfo');\n      });\n    }\n  },\n  isBa() {\n    let userInfo = this.getSavedUserInfo();\n    let userType = userInfo.profile.type;\n    return userType == 'ba';\n  },\n  getTenantId() {\n    let userInfo = this.getSavedUserInfo();\n    let rsl = '';\n    if (userInfo.profile.tenantId) {\n      rsl = userInfo.profile.tenantId;\n    }\n    if (userInfo.profile.tenant && userInfo.profile.tenant.id) {\n      rsl = userInfo.profile.tenant.id;\n    }\n    return rsl;\n  }\n};","map":{"version":3,"names":["IndexedDB","loginedInfo","getLoginInfoFromIndexedDB","Promise","resolve","reject","indexedDB","open","read","JSON","parse","error","console","authUtil","saveLoginInfo","data","localStorage","setItem","stringify","save","getToken","self","window","loginInfo","getItem","token","isSupportter","getSavedUserInfo","profile","type","checkLogin","logout","removeItem","setSavedUserInfo","Object","assign","getCurrentUserRole","role","userDelegate","checkLoginAndSetToIndexedDB","logiInfo","isBa","userInfo","userType","getTenantId","rsl","tenantId","tenant","id"],"sources":["C:/Users/admin/Desktop/nckh k14-k16/frontend/src/plugins/utilModules/auth.js"],"sourcesContent":["import IndexedDB from '@/plugins/utilModules/indexedDB.js';\r\nvar loginedInfo = null;\r\n\r\nasync function getLoginInfoFromIndexedDB() {\r\n    return new Promise((resolve, reject) => {\r\n        let indexedDB = new IndexedDB('SYMPER-LOGIN-INFOR');\r\n        if (!loginedInfo) {\r\n            indexedDB.open('loginInfo', false, false, async () => {\r\n                try {\r\n                    loginedInfo = await indexedDB.read('loginInfo');\r\n                    if (typeof loginedInfo == 'string') {\r\n                        loginedInfo = JSON.parse(loginedInfo);\r\n                    }\r\n                    resolve(loginedInfo);\r\n                } catch (error) {\r\n                    console.error(\r\n                        '[SYMPER] Can not read from indexedDB',\r\n                        error,\r\n                    );\r\n                    reject(error);\r\n                }\r\n            });\r\n        } else {\r\n            resolve(loginedInfo);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Các hàm phục vụ cho việc xác thực, lưu trữ dữ liệu đăng nhập cho người dùng\r\n */\r\nexport const authUtil = {\r\n    saveLoginInfo(data) {\r\n        /**\r\n         * data có dạng: {\r\n         *      token: \"xxx\",\r\n         *      baId: \"yyy\",\r\n         *      endUserId: \"zzzz\"\r\n         * }\r\n         */\r\n        return new Promise((resolve, reject) => {\r\n            localStorage.setItem('symper-login-info', JSON.stringify(data));\r\n            let indexedDB = new IndexedDB('SYMPER-LOGIN-INFOR');\r\n            indexedDB.open('loginInfo', false, false, async () => {\r\n                try {\r\n                    await indexedDB.save(data, 'loginInfo');\r\n                    resolve();\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    getToken() {\r\n        if (self.window) {\r\n            let loginInfo = localStorage.getItem('symper-login-info');\r\n            if (loginInfo) {\r\n                return JSON.parse(loginInfo).token;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return new Promise(async (resolve, reject) => {\r\n                let loginInfo = await getLoginInfoFromIndexedDB();\r\n                resolve(loginInfo.token);\r\n            });\r\n        }\r\n    },\r\n\r\n    isSupportter() {\r\n        return this.getSavedUserInfo().profile.type == 'ba';\r\n    },\r\n\r\n    checkLogin() {\r\n        if (this.getToken()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    logout() {\r\n        localStorage.removeItem('symper-login-info');\r\n    },\r\n\r\n    getSavedUserInfo() {\r\n        let loginInfo = localStorage.getItem('symper-login-info');\r\n        if (loginInfo) {\r\n            return JSON.parse(loginInfo);\r\n        } else {\r\n            return {};\r\n        }\r\n    },\r\n\r\n    async setSavedUserInfo(data) {\r\n        let loginInfo = this.getSavedUserInfo();\r\n        loginInfo = Object.assign(loginInfo, data);\r\n        await this.saveLoginInfo(loginInfo);\r\n    },\r\n\r\n    getCurrentUserRole() {\r\n        let data = this.getSavedUserInfo();\r\n        let role = '';\r\n        if (\r\n            data.profile &&\r\n            data.profile.userDelegate &&\r\n            data.profile.userDelegate.role\r\n        ) {\r\n            role = data.profile.userDelegate.role;\r\n        } else if (data.profile) {\r\n            role = data.profile.role;\r\n        }\r\n        return role;\r\n    },\r\n\r\n    checkLoginAndSetToIndexedDB() {\r\n        if (this.checkLogin()) {\r\n            let logiInfo = this.getSavedUserInfo();\r\n            let indexedDB = new IndexedDB('SYMPER-LOGIN-INFOR');\r\n            indexedDB.open('loginInfo', false, false, () => {\r\n                indexedDB.save(logiInfo, 'loginInfo');\r\n            });\r\n        }\r\n    },\r\n\r\n    isBa() {\r\n        let userInfo = this.getSavedUserInfo();\r\n        let userType = userInfo.profile.type;\r\n        return userType == 'ba';\r\n    },\r\n\r\n    getTenantId() {\r\n        let userInfo = this.getSavedUserInfo();\r\n        let rsl = '';\r\n        if (userInfo.profile.tenantId) {\r\n            rsl = userInfo.profile.tenantId;\r\n        }\r\n\r\n        if (userInfo.profile.tenant && userInfo.profile.tenant.id) {\r\n            rsl = userInfo.profile.tenant.id\r\n        }\r\n        return rsl;\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}