{"ast":null,"code":"const EXPIRE_TIME = 604800; // một tuần\nclass IndexedDB {\n  constructor(_dbName) {\n    this.dbName = _dbName;\n    this.dbVersionNumber = 1;\n  }\n  setDBVersionNumber(_dbVersionNumber) {\n    this.dbVersionNumber = _dbVersionNumber;\n  }\n  open(objName, keyPath = false, objData = false, onsuccess = false, onerror = false, onupgradeneeded = false) {\n    let self = this;\n    return new Promise((resolve, reject) => {\n      self.objName = objName;\n      self.request = indexedDB.open(self.dbName, self.dbVersionNumber);\n      if (onerror) {\n        self.request.onerror = event => onerror();\n      }\n      self.request.onerror = err => {\n        reject(err);\n        console.error('Can not open database ' + self.dbName, err);\n        if (onerror) {\n          onerror();\n        }\n      };\n      self.request.onsuccess = event => {\n        self.db = self.request.result;\n        resolve();\n        if (onsuccess) {\n          onsuccess();\n        }\n      };\n      self.request.onupgradeneeded = event => {\n        let db = event.target.result;\n        let option = keyPath ? {\n          keyPath: keyPath\n        } : {\n          autoIncrement: true\n        };\n        let objectStore = db.createObjectStore(objName, option);\n        if (objData != undefined) {\n          for (let key in objData) {\n            objectStore.add(objData[key]);\n          }\n        }\n        if (onupgradeneeded) {\n          onupgradeneeded();\n        }\n      };\n    });\n  }\n  readAll(callback) {\n    let objectStore = this.db.transaction(this.objName).objectStore(this.objName);\n    objectStore.openCursor().onsuccess = function (event) {\n      let cursor = event.target.result;\n      if (cursor) {\n        callback(cursor);\n        cursor.continue();\n      } else {\n        console.log('No more entries!');\n      }\n    };\n  }\n  read(id) {\n    let transaction = this.db.transaction([this.objName]);\n    let objectStore = transaction.objectStore(this.objName);\n    let keySearch = '' + id;\n    return new Promise((resolve, reject) => {\n      let request = objectStore.get(id);\n      request.onerror = event => {\n        reject(event);\n      };\n      request.onsuccess = event => {\n        resolve(request.result);\n      };\n    });\n  }\n  async save(data, key) {\n    let savedData = await this.read(key);\n    if (savedData) {\n      await this.put(data, key);\n    } else {\n      await this.add(data, key);\n    }\n  }\n  add(value, key = null) {\n    let transaction = this.db.transaction([this.objName], 'readwrite');\n    let objectStore = transaction.objectStore(this.objName);\n    return new Promise((resolve, reject) => {\n      let request = {};\n      if (key) {\n        request = objectStore.add(value, key);\n      } else {\n        request = objectStore.add(value);\n      }\n      request.onsuccess = event => {\n        resolve(event);\n      };\n      request.onerror = event => {\n        reject(event);\n      };\n    });\n  }\n  put(objData, key = null) {\n    let transaction = this.db.transaction([this.objName], 'readwrite');\n    let objectStore = transaction.objectStore(this.objName);\n    return new Promise((resolve, reject) => {\n      let request = {};\n      if (key) {\n        request = objectStore.put(objData, key);\n      } else {\n        request = objectStore.put(objData);\n      }\n      request.onsuccess = event => {\n        resolve(event);\n      };\n      request.onerror = event => {\n        reject(event);\n      };\n    });\n  }\n  remove(id) {\n    let transaction = this.db.transaction([this.objName], 'readwrite');\n    let objectStore = transaction.objectStore(this.objName);\n    let keySearch = '' + id;\n    return new Promise((resolve, reject) => {\n      let request = objectStore.delete(id);\n      request.onerror = event => reject(event);\n      request.onsuccess = event => resolve(event);\n    });\n  }\n  clearAll() {\n    let transaction = this.db.transaction([this.objName], 'readwrite');\n    let objectStore = transaction.objectStore(this.objName);\n    return new Promise((resolve, reject) => {\n      let request = objectStore.clear();\n      request.onerror = event => reject(event);\n      request.onsuccess = event => resolve(event);\n    });\n  }\n}\nexport default IndexedDB;","map":{"version":3,"names":["EXPIRE_TIME","IndexedDB","constructor","_dbName","dbName","dbVersionNumber","setDBVersionNumber","_dbVersionNumber","open","objName","keyPath","objData","onsuccess","onerror","onupgradeneeded","self","Promise","resolve","reject","request","indexedDB","event","err","console","error","db","result","target","option","autoIncrement","objectStore","createObjectStore","undefined","key","add","readAll","callback","transaction","openCursor","cursor","continue","log","read","id","keySearch","get","save","data","savedData","put","value","remove","delete","clearAll","clear"],"sources":["C:/Users/admin/Desktop/nckh k14-k16/frontend/src/plugins/utilModules/indexedDB.js"],"sourcesContent":["const EXPIRE_TIME = 604800; // một tuần\r\nclass IndexedDB {\r\n    constructor(_dbName) {\r\n        this.dbName = _dbName;\r\n        this.dbVersionNumber = 1;\r\n    }\r\n\r\n    setDBVersionNumber(_dbVersionNumber) {\r\n        this.dbVersionNumber = _dbVersionNumber;\r\n    }\r\n\r\n    open(\r\n        objName,\r\n        keyPath = false,\r\n        objData = false,\r\n        onsuccess = false,\r\n        onerror = false,\r\n        onupgradeneeded = false,\r\n    ) {\r\n        let self = this;\r\n        return new Promise((resolve, reject) => {\r\n            self.objName = objName;\r\n            self.request = indexedDB.open(self.dbName, self.dbVersionNumber);\r\n\r\n            if (onerror) {\r\n                self.request.onerror = (event) => onerror();\r\n            }\r\n\r\n            self.request.onerror = (err) => {\r\n                reject(err);\r\n                console.error('Can not open database ' + self.dbName, err);\r\n                if (onerror) {\r\n                    onerror();\r\n                }\r\n            };\r\n\r\n            self.request.onsuccess = (event) => {\r\n                self.db = self.request.result;\r\n                resolve();\r\n                if (onsuccess) {\r\n                    onsuccess();\r\n                }\r\n            };\r\n\r\n            self.request.onupgradeneeded = (event) => {\r\n                let db = event.target.result;\r\n                let option = keyPath\r\n                    ? { keyPath: keyPath }\r\n                    : { autoIncrement: true };\r\n                let objectStore = db.createObjectStore(objName, option);\r\n                if (objData != undefined) {\r\n                    for (let key in objData) {\r\n                        objectStore.add(objData[key]);\r\n                    }\r\n                }\r\n                if (onupgradeneeded) {\r\n                    onupgradeneeded();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    readAll(callback) {\r\n        let objectStore = this.db\r\n            .transaction(this.objName)\r\n            .objectStore(this.objName);\r\n        objectStore.openCursor().onsuccess = function (event) {\r\n            let cursor = event.target.result;\r\n            if (cursor) {\r\n                callback(cursor);\r\n                cursor.continue();\r\n            } else {\r\n                console.log('No more entries!');\r\n            }\r\n        };\r\n    }\r\n\r\n    read(id) {\r\n        let transaction = this.db.transaction([this.objName]);\r\n        let objectStore = transaction.objectStore(this.objName);\r\n        let keySearch = '' + id;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let request = objectStore.get(id);\r\n            request.onerror = (event) => {\r\n                reject(event);\r\n            };\r\n            request.onsuccess = (event) => {\r\n                resolve(request.result);\r\n            };\r\n        });\r\n    }\r\n\r\n    async save(data, key) {\r\n        let savedData = await this.read(key);\r\n        if (savedData) {\r\n            await this.put(data, key);\r\n        } else {\r\n            await this.add(data, key);\r\n        }\r\n    }\r\n\r\n    add(value, key = null) {\r\n        let transaction = this.db.transaction([this.objName], 'readwrite');\r\n        let objectStore = transaction.objectStore(this.objName);\r\n        return new Promise((resolve, reject) => {\r\n            let request = {};\r\n            if (key) {\r\n                request = objectStore.add(value, key);\r\n            } else {\r\n                request = objectStore.add(value);\r\n            }\r\n            request.onsuccess = (event) => {\r\n                resolve(event);\r\n            };\r\n            request.onerror = (event) => {\r\n                reject(event);\r\n            };\r\n        });\r\n    }\r\n\r\n    put(objData, key = null) {\r\n        let transaction = this.db.transaction([this.objName], 'readwrite');\r\n        let objectStore = transaction.objectStore(this.objName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let request = {};\r\n            if (key) {\r\n                request = objectStore.put(objData, key);\r\n            } else {\r\n                request = objectStore.put(objData);\r\n            }\r\n            request.onsuccess = (event) => {\r\n                resolve(event);\r\n            };\r\n            request.onerror = (event) => {\r\n                reject(event);\r\n            };\r\n        });\r\n    }\r\n\r\n    remove(id) {\r\n        let transaction = this.db.transaction([this.objName], 'readwrite');\r\n        let objectStore = transaction.objectStore(this.objName);\r\n        let keySearch = '' + id;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let request = objectStore.delete(id);\r\n            request.onerror = (event) => reject(event);\r\n            request.onsuccess = (event) => resolve(event);\r\n        });\r\n    }\r\n\r\n    clearAll() {\r\n        let transaction = this.db.transaction([this.objName], 'readwrite');\r\n        let objectStore = transaction.objectStore(this.objName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let request = objectStore.clear();\r\n            request.onerror = (event) => reject(event);\r\n            request.onsuccess = (event) => resolve(event);\r\n        });\r\n    }\r\n}\r\nexport default IndexedDB;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}