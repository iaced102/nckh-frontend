{"ast":null,"code":"// import { util } from './../plugins/util.js';\n\nimport { feeAjax } from './feeAjax.js';\nimport $ from 'jquery';\n\n// function makeCacheHeader(headers, url, data, options) {\n//     headers['Symper-Request-Name'] = options.requestName\n//         ? options.requestName\n//         : util.str.hashCode(JSON.stringify(['GET', url, data]));\n//     headers['Symper-Cache-Strategy'] = options.cacheStrategy\n//         ? 'cache-first'\n//         : 'network-first';\n//     return headers;\n// }\n\nexport default class Api {\n  /**\r\n   * Khởi tạo một class Api với base url\r\n   * @param {String} baseUrl\r\n   */\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl[baseUrl.length - 1] == '/' ? baseUrl : baseUrl + '/';\n  }\n\n  /**\r\n   * Tạo url từ uri\r\n   * @param {String} uri uri\r\n   */\n  getFullUrl(uri) {\n    uri = uri.trim();\n    return this.baseUrl + uri;\n  }\n\n  /**\r\n   * Thực hiện post request\r\n   * @param {String} uri uri của API\r\n   * @param {Object} data data muốn gửi về cho server\r\n   * @param {Object} header custom header cho request\r\n   * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n   * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n   */\n  post(uri, data, header = {}, options = {}) {\n    let url = this.getFullUrl(uri);\n    return this.callApi('POST', url, data, header, options);\n  }\n\n  /**\r\n   * Thực hiện get request\r\n   * @param {String} uri uri của API\r\n   * @param {Object} data data muốn gửi về cho server\r\n   * @param {Object} header custom header cho request\r\n   * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n   * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n   */\n  get(uri, data = {}, header = {}, options = {}) {\n    let url = this.getFullUrl(uri);\n    return this.callApi('GET', url, data, header, options);\n  }\n\n  /**\r\n   * Thực hiện put request\r\n   * @param {String} uri uri của API\r\n   * @param {Object} data data muốn gửi về cho server\r\n   * @param {Object} header custom header cho request\r\n   * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n   * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n   */\n  put(uri, data, header = {}, options = {}) {\n    let url = this.getFullUrl(uri);\n    return this.callApi('PUT', url, data, header, options);\n  }\n  /**\r\n   * Thực hiện patch request\r\n   * @param {String} uri uri của API\r\n   * @param {Object} data data muốn gửi về cho server\r\n   * @param {Object} header custom header cho request\r\n   * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n   * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n   */\n  patch(uri, data, header = {}, options = {}) {\n    let url = this.getFullUrl(uri);\n    return this.callApi('PATCH', url, data, header, options);\n  }\n\n  /**\r\n   * Thực hiện delete request\r\n   * @param {String} uri uri của API\r\n   * @param {Object} data data muốn gửi về cho server\r\n   * @param {Object} header custom header cho request\r\n   * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n   * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n   */\n  delete(uri, data, header = {}, options = {}) {\n    let url = this.getFullUrl(uri);\n    return this.callApi('DELETE', url, data, header, options);\n  }\n\n  /**\r\n   * Thực hiện gọi một request tới server\r\n   * @param {String} method Phương thức áp dụng cho request này\r\n   * @param {String} url url cần gọi của API\r\n   * @param {Object} data data muốn gửi về cho server\r\n   * @param {Object} headers custom header cho request\r\n   * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n   * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n   */\n  async callApi(method, url, data, headers, options) {\n    let token = ''; //util.auth.getToken();\n    if (token instanceof Promise) {\n      token = await token;\n    }\n    headers = Object.assign({\n      Authorization: `Bearer ${token}`\n    }, headers);\n    if (method == 'GET' || method == 'POST' && options.cacheResponse) {\n      // headers = makeCacheHeader(headers, url, data, options);\n    }\n    let defaultOptions = {\n      method: method,\n      data: data,\n      url: url,\n      dataType: 'json',\n      crossDomain: true,\n      headers: headers\n    };\n    options = Object.assign(defaultOptions, options);\n    let res = {};\n    /**\r\n     * Hàm check nếu gọi api từ worker thì thêm 1 hàm mới gọi từ đó\r\n     */\n    if (self.window) {\n      console.log(options);\n      res = await $.ajax(options);\n    } else {\n      console.log(options);\n      res = await feeAjax(options);\n    }\n    return res;\n  }\n}","map":{"version":3,"names":["feeAjax","$","Api","constructor","baseUrl","length","getFullUrl","uri","trim","post","data","header","options","url","callApi","get","put","patch","delete","method","headers","token","Promise","Object","assign","Authorization","cacheResponse","defaultOptions","dataType","crossDomain","res","self","window","console","log","ajax"],"sources":["C:/Users/admin/Desktop/nckh k14-k16/frontend/src/api/api.js"],"sourcesContent":["// import { util } from './../plugins/util.js';\r\n\r\nimport { feeAjax } from './feeAjax.js';\r\nimport $ from 'jquery'\r\n\r\n// function makeCacheHeader(headers, url, data, options) {\r\n//     headers['Symper-Request-Name'] = options.requestName\r\n//         ? options.requestName\r\n//         : util.str.hashCode(JSON.stringify(['GET', url, data]));\r\n//     headers['Symper-Cache-Strategy'] = options.cacheStrategy\r\n//         ? 'cache-first'\r\n//         : 'network-first';\r\n//     return headers;\r\n// }\r\n\r\nexport default class Api {\r\n    /**\r\n     * Khởi tạo một class Api với base url\r\n     * @param {String} baseUrl\r\n     */\r\n    constructor(baseUrl) {\r\n        this.baseUrl =\r\n            baseUrl[baseUrl.length - 1] == '/' ? baseUrl : baseUrl + '/';\r\n    }\r\n\r\n    /**\r\n     * Tạo url từ uri\r\n     * @param {String} uri uri\r\n     */\r\n    getFullUrl(uri) {\r\n        uri = uri.trim();\r\n        return this.baseUrl + uri\r\n    }\r\n\r\n    /**\r\n     * Thực hiện post request\r\n     * @param {String} uri uri của API\r\n     * @param {Object} data data muốn gửi về cho server\r\n     * @param {Object} header custom header cho request\r\n     * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n     * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n     */\r\n    post(uri, data, header = {}, options = {}) {\r\n        let url = this.getFullUrl(uri);\r\n        return this.callApi('POST', url, data, header, options);\r\n    }\r\n\r\n    /**\r\n     * Thực hiện get request\r\n     * @param {String} uri uri của API\r\n     * @param {Object} data data muốn gửi về cho server\r\n     * @param {Object} header custom header cho request\r\n     * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n     * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n     */\r\n    get(uri, data = {}, header = {}, options = {}) {\r\n        let url = this.getFullUrl(uri);\r\n        return this.callApi('GET', url, data, header, options);\r\n    }\r\n\r\n    /**\r\n     * Thực hiện put request\r\n     * @param {String} uri uri của API\r\n     * @param {Object} data data muốn gửi về cho server\r\n     * @param {Object} header custom header cho request\r\n     * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n     * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n     */\r\n    put(uri, data, header = {}, options = {}) {\r\n        let url = this.getFullUrl(uri);\r\n        return this.callApi('PUT', url, data, header, options);\r\n    }\r\n    /**\r\n     * Thực hiện patch request\r\n     * @param {String} uri uri của API\r\n     * @param {Object} data data muốn gửi về cho server\r\n     * @param {Object} header custom header cho request\r\n     * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n     * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n     */\r\n    patch(uri, data, header = {}, options = {}) {\r\n        let url = this.getFullUrl(uri);\r\n        return this.callApi('PATCH', url, data, header, options);\r\n    }\r\n\r\n    /**\r\n     * Thực hiện delete request\r\n     * @param {String} uri uri của API\r\n     * @param {Object} data data muốn gửi về cho server\r\n     * @param {Object} header custom header cho request\r\n     * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n     * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n     */\r\n    delete(uri, data, header = {}, options = {}) {\r\n        let url = this.getFullUrl(uri);\r\n        return this.callApi('DELETE', url, data, header, options);\r\n    }\r\n\r\n    /**\r\n     * Thực hiện gọi một request tới server\r\n     * @param {String} method Phương thức áp dụng cho request này\r\n     * @param {String} url url cần gọi của API\r\n     * @param {Object} data data muốn gửi về cho server\r\n     * @param {Object} headers custom header cho request\r\n     * @param {Object} options các option thêm cho request theo Jquery Ajax\r\n     * @returns {Object} Đối tượng có thể sử dụng như của promise\r\n     */\r\n    async callApi(method, url, data, headers, options) {\r\n        let token = ''//util.auth.getToken();\r\n        if (token instanceof Promise) {\r\n            token = await token;\r\n        }\r\n        headers = Object.assign(\r\n            {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            headers,\r\n        );\r\n\r\n        if (\r\n            method == 'GET' || method == 'POST' && options.cacheResponse\r\n        ) {\r\n            // headers = makeCacheHeader(headers, url, data, options);\r\n        }\r\n\r\n        let defaultOptions = {\r\n            method: method,\r\n            data: data,\r\n            url: url,\r\n            dataType: 'json',\r\n            crossDomain: true,\r\n            headers: headers,\r\n        };\r\n        options = Object.assign(defaultOptions, options);\r\n        let res = {};\r\n        /**\r\n         * Hàm check nếu gọi api từ worker thì thêm 1 hàm mới gọi từ đó\r\n         */\r\n        if (self.window) {\r\n            console.log(options)\r\n            res = await $.ajax(options);\r\n        } else {\r\n            console.log(options)\r\n            res = await feeAjax(options);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}